#!/usr/bin/env node
//'use strict';
const fs = require("fs");
const Terser = require("terser");
const chalk = require("chalk");
const yargs = require("yargs");

const opts = yargs
 .usage(chalk.cyan("Usage: -i <input file>"))
 .example(chalk.green('$0 -i defense.js -o defense.min.js'))
 .example(chalk.green('$0 -i defense.js  -> will create defense.min.js'))
 .option("i", { alias: "input", describe: "Bot Land script to minify", type: "string", demandOption: true })
 .option("o", { alias: "output", describe: "Minified output filename", type: "string", demandOption: false })
 .option('s', { alias: "screen", describe: "Echoes the output to the screen instead of to a file", type: "boolean", demandOption: false })
 .option('v', { alias: "verbose", describe: "Shows warnings",type: "boolean", demandOption: false})
 .option('d', { alias: "debug", describe: "Do not remove debugLog (for debugging)",type: "boolean", demandOption: false})
 .epilog(chalk.yellow("made for Bot Land - Bot Land username: Ron - no copyright 2019"))
 .argv;


var options = {
    warnings: "verbose",
    keep_fnames: false,
    mangle: {
     toplevel: true,
     keep_fnames: false,
        properties: {
                reserved: ['test']
              }

   },
    compress: {
    passes: 20,
    toplevel: true,
    dead_code: true,
    sequences: false,
    conditionals: false,
    drop_console: true,
},
    output: {
        ecma: 6,
        semicolons: false,
        beautify: false,
        preamble: "/* minified Bot Land script */",
        ast: true
    }

};



var inputFile = process.cwd() + `/${opts.input}`;

var outputFile = inputFile.substring(0, inputFile.indexOf('.')) + '.min.js' ;


if(opts.output){outputFile = process.cwd() + `/${opts.output}`;}

var code = fs.readFileSync(inputFile,'utf-8');

if(opts.debug!==true) code = code.replace(/debugLog/g,"console.log");

const result = Terser.minify(code,options);

//const ast=JSON.parse(result.ast);
//console.log(ast.map(g => g.name));
//console.log(getObjects(ast,'name',''));

if(!opts.screen)fs.writeFileSync(outputFile,result.code);

console.log('Bot Land Minification done..');
if(result.warnings&&opts.verbose)console.log('Warnings: '+result.warnings);
if(result.errors)console.log('Errors: '+result.errors);
if(!opts.screen)console.log('Created file: '+outputFile);
if(opts.screen){console.log(' ');console.log(result.code);console.log(' ');}


function getObjects(obj, key, val) {
    var objects = [];
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) continue;
        if (typeof obj[i] == 'object') {
            objects = objects.concat(getObjects(obj[i], key, val));    
        } else 
        //if key matches and value matches or if key matches and value is not passed (eliminating the case where key matches but passed value does not)
        if (i == key && obj[i] == val || i == key && val == '') { //
            objects.push(obj);
        } else if (obj[i] == val && key == ''){
            //only add if the object is not already in the array
            if (objects.lastIndexOf(obj) == -1){
                objects.push(obj);
            }
        }
    }
    return objects;
}


